#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Estrutura de um nó da árvore
typedef struct no {
    int chave;
    int prioridade;
    struct no *esquerda;
    struct no *direita;
} No;

// Função para gerar uma prioridade aleatória
int prioridade_aleatoria() {
    return rand() % 100; // Ajuste o intervalo conforme necessário
}

// Função para criar um novo nó
No* novo_no(int chave) {
    No* temp = (No*)malloc(sizeof(No));
    temp->chave = chave;
    temp->prioridade = prioridade_aleatoria();
    temp->esquerda = temp->direita = NULL;
    return temp;
}

// Rotação à direita
No* rotacao_direita(No* y) {
    No* x = y->esquerda;
    No* T2 = x->direita;

    x->direita = y;
    y->esquerda = T2;

    return x;
}

// Rotação à esquerda
No* rotacao_esquerda(No* x) {
    No* y = x->direita;
    No* T2 = y->esquerda;

    y->esquerda = x;
    x->direita = T2;

    return y;
}

// Inserção em um Treap
No* inserir(No* no, int chave) {
    if (no == NULL)
        return novo_no(chave);

    if (chave < no->chave) {
        no->esquerda = inserir(no->esquerda, chave);
        if (no->esquerda->prioridade > no->prioridade)
            no = rotacao_direita(no);
    } else {
        no->direita = inserir(no->direita, chave);
        if (no->direita->prioridade > no->prioridade)
            no = rotacao_esquerda(no);
    }

    return no;
}

// Impressão da árvore (em ordem)
void imprimir_em_ordem(No* raiz) {
    if (raiz != NULL) {
        imprimir_em_ordem(raiz->esquerda);
        printf("%d(%d) ", raiz->chave, raiz->prioridade);
        imprimir_em_ordem(raiz->direita);
    }
}

int main() {
    srand(time(0)); // Inicializa o gerador de números aleatórios

    No* raiz = NULL;
    raiz = inserir(raiz, 10);
    raiz = inserir(raiz, 20);
    raiz = inserir(raiz, 30);
    raiz = inserir(raiz, 5);
    raiz = inserir(raiz, 15);

    printf("Impressão em ordem: ");
    imprimir_em_ordem(raiz);

    return 0;
}
